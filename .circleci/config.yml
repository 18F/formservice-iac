version: 2.1
jobs:
  push-image:
    docker:
      - image: docker:dind
        environment:
          ACCOUNT: "306811362825"
          REGION: "us-gov-west-1"
    steps:
      - checkout
      - run:
          name: "Log in to prod aws ecr"
          command: |
            # install dependencies
            apk add py3-pip
            pip3 install awscli

            # configure aws credentials file
            mkdir -p ~/.aws/
            touch ~/.aws/credentials
            echo '
            [default]
            aws_access_key_id=${AWS_ACCESS_KEY_ID}
            aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
            ' >> ~/.aws/credentials

            # configure aws config file
            mkdir -p ~/.aws/
            touch ~/.aws/config
            echo '
            [default]
            region=us-gov-west-1
            ' >> ~/.aws/config

            # log in to prod aws ecr
            aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: "Docker pull, build, tag, push"
          command: |
            # install dependencies
            apk update && apk add bash

            # run docker.sh
            ./docker.sh
  terragrunt-plan:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |

            # install dependencies
            apt update && apt install -y git wget unzip curl jq

            # install terraform
            wget -O terraform.zip https://releases.hashicorp.com/terraform/1.2.3/terraform_1.2.3_linux_amd64.zip && unzip terraform.zip && rm terraform.zip && mv terraform /usr/bin/terraform && chmod uo+x /usr/bin/terraform

            # install terragrunt
            wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.35.8/terragrunt_linux_amd64 && mv terragrunt_linux_amd64 /usr/bin/terragrunt && chmod uo+x /usr/bin/terragrunt

            # install aws cli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install

      - run:
          name: Run terragrunt plan
          command: |

            # get current git commit
            SHORT_GIT_HASH=$(echo $CIRCLE_SHA1 | cut -c -7)

            # show all files changed with this current git commit
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $SHORT_GIT_HASH)

            # list our deployment files
            DEPLOYMENT_FILES=(
              env/dev/hub/formio/tenants/epa/service/terragrunt.hcl
              env/dev/hub/formio/tenants/irs/service/terragrunt.hcl
              env/dev/hub/formio/tenants/portal/service/terragrunt.hcl
              env/dev/hub/formio/pdf-server/service/terragrunt.hcl
            )

            # make directory and file for terragrunt plan
            mkdir -p /tmp/workspace/
            touch /tmp/workspace/plan.tf

            # for each changed file in this current commit
            for CHANGED_FILE in $CHANGED_FILES; do

              # echo "${DEPLOYMENT_FILES[*]}"

              # echo $CHANGED_FILE

              # if any our deployment files were commited, change to that directory and run terragrunt plan
              if [[ " ${DEPLOYMENT_FILES[*]} " =~ " ${CHANGED_FILE} " ]]; then

                # get directory of changed file
                DIRECTORY=$(dirname "${CHANGED_FILE}")

                # get environment name from directory of changed file
                ENVIRONMENT_NAME=$(echo ${DIRECTORY} | awk -F/ '{ print $2 }')

                # touch caller-identity.txt
                # aws sts get-caller-identity >> caller-identity.txt
                # cat caller-identity.txt

                # get session token for prod environment
                AWS_CREDENTIALS=$(aws sts get-session-token)

                # set aws credentials for each environment
                ## if prod
                if [[ $ENVIRONMENT_NAME == "prod" ]]; then
                  AWS_CREDENTIALS=$(aws sts get-session-token)
                fi

                ## if test
                if [[ $ENVIRONMENT_NAME == "test" ]]; then
                  AWS_CREDENTIALS=$(aws sts assume-role --role-arn "arn:aws-us-gov:iam::306851503416:role/circleci-apply-terraform" --role-session-name "credentials")
                fi

                ## if dev
                if [[ $ENVIRONMENT_NAME == "dev" ]]; then
                  echo "In dev if statement"
                  AWS_CREDENTIALS=$(aws sts assume-role --role-arn "arn:aws-us-gov:iam::306881650362:role/circleci-apply-terraform" --role-session-name "credentials")
                  echo ${AWS_CREDENTIALS} | jq -r '.Credentials.AccessKeyId'
                fi

                # extract and export aws credentials
                export AWS_ACCESS_KEY_ID=$(echo ${AWS_CREDENTIALS} | jq -r '.Credentials.AccessKeyId')
                export AWS_SECRET_ACCESS_KEY=$(echo ${AWS_CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')
                export AWS_SESSION_TOKEN=$(echo ${AWS_CREDENTIALS} | jq -r '.Credentials.SessionToken')

                # change into directory of changed file
                cd $DIRECTORY

                # list present working directory
                pwd

                # make directory and file for terragrunt plan
                mkdir -p /tmp/workspace/
                touch /tmp/workspace/plan.tf

                # run terragrunt plan
                terragrunt plan -out /tmp/workspace/plan.tf

                cat /tmp/workspace/plan.tf

              else
                echo "not in if statement"
              fi
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - plan.tf
  terragrunt-apply:
    docker:
      - image: ubuntu:latest
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          cat /tmp/workspace/plan.tf

workflows:
  docker:
    jobs:
      # - push-image
      - terragrunt-plan:
          filters:
            branches:
              only: circleci # only run circleci pipeline on the circleci github branch
      - terragrunt-apply:
          type: approval # this sets the job to a status of "On Hold" and requires manual approval in the CircleCI web application
          requires:
            - terragrunt-plan # only run the job terragrunt-apply if the job terragrunt-plan suceeds
          filters:
            branches:
              only: circleci # only run circleci pipeline on the circleci github branch
